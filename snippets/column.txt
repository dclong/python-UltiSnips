def explain(extended: Boolean): Unit

Prints the expression to the console for debugging purposes.

Expression operators

def %(other: Any): Column

Modulo (a.k.a.
def &&(other: Any): Column

Boolean AND.
def *(other: Any): Column

Multiplication of this expression and another expression.
def +(other: Any): Column

Sum of this expression and another expression.
def -(other: Any): Column

Subtraction.
def /(other: Any): Column

Division this expression by another expression.
def <(other: Any): Column

Less than.
def <=(other: Any): Column

Less than or equal to.
def <=>(other: Any): Column

Equality test that is safe for null values.
def =!=(other: Any): Column

Inequality test.
def ===(other: Any): Column

Equality test.
def >(other: Any): Column

Greater than.
def >=(other: Any): Column

Greater than or equal to an expression.
def alias(alias: String): Column

Gives the column an alias.
def apply(extraction: Any): Column

Extracts a value or values from a complex type.
def as(alias: String, metadata: Metadata): Column

Gives the column an alias with metadata.
def as(alias: Symbol): Column

Gives the column an alias.
def as(aliases: Array[String]): Column

Assigns the given aliases to the results of a table generating function.
def as(aliases: Seq[String]): Column

(Scala-specific) Assigns the given aliases to the results of a table generating function.
def as(alias: String): Column

Gives the column an alias.
def asc: Column

Returns an ascending ordering used in sorting.
def asc_nulls_first: Column

Returns an ascending ordering used in sorting, where null values appear before non-null values.
def asc_nulls_last: Column

Returns an ordering used in sorting, where null values appear after non-null values.
def bitwiseAND(other: Any): Column

Compute bitwise AND of this expression with another expression.
def bitwiseOR(other: Any): Column

Compute bitwise OR of this expression with another expression.
def bitwiseXOR(other: Any): Column

Compute bitwise XOR of this expression with another expression.
def cast(to: String): Column

Casts the column to a different data type, using the canonical string representation of the type.
def cast(to: DataType): Column

Casts the column to a different data type.
def contains(other: Any): Column

Contains the other element.
def desc: Column

Returns an ordering used in sorting.
def desc_nulls_first: Column

Returns a descending ordering used in sorting, where null values appear before non-null values.
def desc_nulls_last: Column

Returns a descending ordering used in sorting, where null values appear after non-null values.
def endsWith(literal: String): Column

String ends with another string literal.
def endsWith(other: Column): Column

String ends with.
def equalTo(other: Any): Column

Equality test.
def getField(fieldName: String): Column

An expression that gets a field by name in a StructType.
def getItem(key: Any): Column

An expression that gets an item at position ordinal out of an array, or gets a value by key key in a MapType.
def isNaN: Column

True if the current expression is NaN.
def isNotNull: Column

True if the current expression is NOT null.
def isNull: Column

True if the current expression is null.
def isin(list: Any*): Column

A boolean expression that is evaluated to true if the value of this expression is contained by the evaluated values of the arguments.
def like(literal: String): Column

SQL like expression.
def name(alias: String): Column

Gives the column a name (alias).
def otherwise(value: Any): Column

Evaluates a list of conditions and returns one of multiple possible result expressions.
def over(): Column

Define a empty analytic clause.
def over(window: WindowSpec): Column

Define a windowing column.
def rlike(literal: String): Column

SQL RLIKE expression (LIKE with Regex).
def startsWith(literal: String): Column

String starts with another string literal.
def startsWith(other: Column): Column

String starts with.
def substr(startPos: Int, len: Int): Column

An expression that returns a substring.
def substr(startPos: Column, len: Column): Column

An expression that returns a substring.
def unary_!: Column

Inversion of boolean expression, i.e.
def unary_-: Column

Unary minus, i.e.
def when(condition: Column, value: Any): Column

Evaluates a list of conditions and returns one of multiple possible result expressions.
def ||(other: Any): Column

Boolean OR.
def !==(other: Any): Column

Inequality test.

Java-specific expression operators

def and(other: Column): Column

Boolean AND.
def between(lowerBound: Any, upperBound: Any): Column

True if the current column is between the lower bound and upper bound, inclusive.
def divide(other: Any): Column

Division this expression by another expression.
def eqNullSafe(other: Any): Column

Equality test that is safe for null values.
def geq(other: Any): Column

Greater than or equal to an expression.
def gt(other: Any): Column

Greater than.
def leq(other: Any): Column

Less than or equal to.
def lt(other: Any): Column

Less than.
def minus(other: Any): Column

Subtraction.
def mod(other: Any): Column

Modulo (a.k.a.
def multiply(other: Any): Column

Multiplication of this expression and another expression.
def notEqual(other: Any): Column

Inequality test.
def or(other: Column): Column

Boolean OR.
def plus(other: Any): Column

Sum of this expression and another expression.

Support functions for DataFrames

def as[U](implicit arg0: Encoder[U]): TypedColumn[Any, U]

Provides a type hint about the expected return value of this column.
def equals(that: Any): Boolean
val expr: Expression
def hashCode(): Int
def toString(): String 
