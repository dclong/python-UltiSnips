
abs(x) absolute value

all(iterable) Return True if all elements of the iterable are true (or if the iterable is empty). 

any(iterable) Return True if any element of the iterable is true. 

basestring() 
abstract type; superclass for str and unicode 

bin(x) Convert an integer number to a binary string 

callable(object) Return True if the object argument appears callable, False if not. 

chr(i) Return a string of one character whose ASCII code is the integer i. 

classmethod(function) Return a class method for function.

cmp(x, y) Compare the two objects x and y and return an integer according to the outcome. 

compile(source, filename, mode[, flags[, dont_inherit]]) Compile the source into a code or AST object. 

complex([real[, imag]]) Return a complex number with the value real + imag*j or convert a string or number to a complex number. 

delattr(object, name) This is a relative of setattr(). 

dict Create a new dictionary. 

dir([object]) Without arguments, return the list of names in the current local scope. With an argument, attempt to return a list of valid attributes for that object.

enumerate(sequence, start=0) Return an enumerate object. 

eval(expression[, globals[, locals]]) The arguments are a Unicode or Latin-1 encoded string and optional globals and locals. 

filter(function, iterable) Construct a list from those elements of iterable for which function returns true. 

float([x]) Return a floating point number constructed from a number or string x.

format(value[, format_spec]) Convert a value to a “formatted” representation, as controlled by format_spec. 

frozenset([iterable]) Return a new frozenset object, optionally with elements taken from iterable. 

getattr(object, name[, default]) Return the value of the named attribute of object. name must be a string. 

globals() Return a dictionary representing the current global symbol table. 

hasattr(object, name) The arguments are an object and a string. 

hash(object) Return the hash value of the object (if it has one). 

help([object]) Invoke the built-in help system. 

hex(x) Convert an integer number (of any size) to a lowercase hexadecimal string prefixed with “0x”.

id(object) Return the “identity” of an object. 

input([prompt]) Equivalent to eval(raw_input(prompt)).

int(x=0) class int(x, base=10) Return an integer object constructed from a number or string x, or return 0 if no arguments are given. 

isinstance(object, classinfo) Return true if the object argument is an instance of the classinfo argument, or of a (direct, indirect or virtual) subclass thereof. 

issubclass(class, classinfo) Return true if class is a subclass (direct, indirect or virtual) of classinfo. 

iter(o[, sentinel]) Return an iterator object. 

len(s) Return the length (the number of items) of an object. 

list([iterable]) Return a list whose items are the same and in the same order as iterable‘s items. 

locals() Update and return a dictionary representing the current local symbol table. 


class long(x=0) class long(x, base=10) Return a long integer object constructed from a string or number x. 

map(function, iterable, ...) Apply function to every item of iterable and return a list of the results. 


max(iterable[, key]) max(arg1, arg2, *args[, key]) 
    Return the largest item in an iterable or the largest of two or more arguments.

memoryview(obj) Return a “memory view” object created from the given argument. 

min(iterable[, key]) min(arg1, arg2, *args[, key]) Return the smallest item in an iterable or the smallest of two or more arguments.

next(iterator[, default]) Retrieve the next item from the iterator by calling its next() method. 

oct(x) Convert an integer number (of any size) to an octal string. 

open(name[, mode[, buffering]]) Open a file, returning an object of the file type described in section File Objects. 

ord(c) Given a string of length one, return an integer representing the Unicode code point of the character when the argument is a unicode object, or the value of the byte when the argument is an 8-bit string. 

pow(x, y[, z]) Return x to the power y; if z is present, return x to the power y, modulo z (computed more efficiently than pow(x, y) % z). 

property([fget[, fset[, fdel[, doc]]]]) Return a property attribute for new-style classes (classes that derive from object).

range(stop)
range(start, stop[, step])

    This is a versatile function to create lists containing arithmetic progressions. 
    
raw_input([prompt]) If the prompt argument is present, it is written to standard output without a trailing newline. 
    
reduce(function, iterable[, initializer]) Apply function of two arguments cumulatively to the items of iterable, from left to right, so as to reduce the iterable to a single value. 

reload(module) Reload a previously imported module. 

repr(object) Return a string containing a printable representation of an object. 

reversed(seq) Return a reverse iterator. 

round(number[, ndigits]) Return the floating point value number rounded to ndigits digits after the decimal point. 

set([iterable]) Return a new set object, optionally with elements taken from iterable. 

setattr(object, name, value) This is the counterpart of getattr(). 

slice(stop)
class slice(start, stop[, step]) Return a slice object representing the set of indices specified by range(start, stop, step). 

sorted(iterable[, cmp[, key[, reverse]]]) Return a new sorted list from the items in iterable.

staticmethod(function) Return a static method for function.

        def f(arg1, arg2, ...):
            ...

    The @staticmethod form is a function decorator – see the description of function definitions in Function definitions for details.

    It can be called either on the class (such as C.f()) or on an instance (such as C().f()). The instance is ignored except for its class.

    Static methods in Python are similar to those found in Java or C++. Also see classmethod() for a variant that is useful for creating alternate class constructors.

    For more information on static methods, consult the documentation on the standard type hierarchy in The standard type hierarchy.

    New in version 2.2.

    Changed in version 2.4: Function decorator syntax added.

class str(object='')

    Return a string containing a nicely printable representation of an object. For strings, this returns the string itself. The difference with repr(object) is that str(object) does not always attempt to return a string that is acceptable to eval(); its goal is to return a printable string. If no argument is given, returns the empty string, ''.

    For more information on strings see Sequence Types — str, unicode, list, tuple, bytearray, buffer, xrange which describes sequence functionality (strings are sequences), and also the string-specific methods described in the String Methods section. To output formatted strings use template strings or the % operator described in the String Formatting Operations section. In addition see the String Services section. See also unicode().

sum(iterable[, start])

    Sums start and the items of an iterable from left to right and returns the total. start defaults to 0. The iterable‘s items are normally numbers, and the start value is not allowed to be a string.

    For some use cases, there are good alternatives to sum(). The preferred, fast way to concatenate a sequence of strings is by calling ''.join(sequence). To add floating point values with extended precision, see math.fsum(). To concatenate a series of iterables, consider using itertools.chain().

    New in version 2.3.

super(type[, object-or-type])

    Return a proxy object that delegates method calls to a parent or sibling class of type. This is useful for accessing inherited methods that have been overridden in a class. The search order is same as that used by getattr() except that the type itself is skipped.

    The __mro__ attribute of the type lists the method resolution search order used by both getattr() and super(). The attribute is dynamic and can change whenever the inheritance hierarchy is updated.

    If the second argument is omitted, the super object returned is unbound. If the second argument is an object, isinstance(obj, type) must be true. If the second argument is a type, issubclass(type2, type) must be true (this is useful for classmethods).

    Note

    super() only works for new-style classes.

    There are two typical use cases for super. In a class hierarchy with single inheritance, super can be used to refer to parent classes without naming them explicitly, thus making the code more maintainable. This use closely parallels the use of super in other programming languages.

    The second use case is to support cooperative multiple inheritance in a dynamic execution environment. This use case is unique to Python and is not found in statically compiled languages or languages that only support single inheritance. This makes it possible to implement “diamond diagrams” where multiple base classes implement the same method. Good design dictates that this method have the same calling signature in every case (because the order of calls is determined at runtime, because that order adapts to changes in the class hierarchy, and because that order can include sibling classes that are unknown prior to runtime).

    For both use cases, a typical superclass call looks like this:

    class C(B):
        def method(self, arg):
            super(C, self).method(arg)

    Note that super() is implemented as part of the binding process for explicit dotted attribute lookups such as super().__getitem__(name). It does so by implementing its own __getattribute__() method for searching classes in a predictable order that supports cooperative multiple inheritance. Accordingly, super() is undefined for implicit lookups using statements or operators such as super()[name].

    Also note that super() is not limited to use inside methods. The two argument form specifies the arguments exactly and makes the appropriate references.

    For practical suggestions on how to design cooperative classes using super(), see guide to using super().

    New in version 2.2.

tuple([iterable])

    Return a tuple whose items are the same and in the same order as iterable‘s items. iterable may be a sequence, a container that supports iteration, or an iterator object. If iterable is already a tuple, it is returned unchanged. For instance, tuple('abc') returns ('a', 'b', 'c') and tuple([1, 2, 3]) returns (1, 2, 3). If no argument is given, returns a new empty tuple, ().

    tuple is an immutable sequence type, as documented in Sequence Types — str, unicode, list, tuple, bytearray, buffer, xrange. For other containers see the built in dict, list, and set classes, and the collections module.

class type(object)
class type(name, bases, dict)

    With one argument, return the type of an object. The return value is a type object. The isinstance() built-in function is recommended for testing the type of an object.

    With three arguments, return a new type object. This is essentially a dynamic form of the class statement. The name string is the class name and becomes the __name__ attribute; the bases tuple itemizes the base classes and becomes the __bases__ attribute; and the dict dictionary is the namespace containing definitions for class body and becomes the __dict__ attribute. For example, the following two statements create identical type objects:
    >>>

    >>> class X(object):
    ...     a = 1
    ...
    >>> X = type('X', (object,), dict(a=1))

    New in version 2.2.

unichr(i)

    Return the Unicode string of one character whose Unicode code is the integer i. For example, unichr(97) returns the string u'a'. This is the inverse of ord() for Unicode strings. The valid range for the argument depends how Python was configured – it may be either UCS2 [0..0xFFFF] or UCS4 [0..0x10FFFF]. ValueError is raised otherwise. For ASCII and 8-bit strings see chr().

    New in version 2.0.

unicode(object='')
unicode(object[, encoding[, errors]])

    Return the Unicode string version of object using one of the following modes:

    If encoding and/or errors are given, unicode() will decode the object which can either be an 8-bit string or a character buffer using the codec for encoding. The encoding parameter is a string giving the name of an encoding; if the encoding is not known, LookupError is raised. Error handling is done according to errors; this specifies the treatment of characters which are invalid in the input encoding. If errors is 'strict' (the default), a ValueError is raised on errors, while a value of 'ignore' causes errors to be silently ignored, and a value of 'replace' causes the official Unicode replacement character, U+FFFD, to be used to replace input characters which cannot be decoded. See also the codecs module.

    If no optional parameters are given, unicode() will mimic the behaviour of str() except that it returns Unicode strings instead of 8-bit strings. More precisely, if object is a Unicode string or subclass it will return that Unicode string without any additional decoding applied.

    For objects which provide a __unicode__() method, it will call this method without arguments to create a Unicode string. For all other objects, the 8-bit string version or representation is requested and then converted to a Unicode string using the codec for the default encoding in 'strict' mode.

    For more information on Unicode strings see Sequence Types — str, unicode, list, tuple, bytearray, buffer, xrange which describes sequence functionality (Unicode strings are sequences), and also the string-specific methods described in the String Methods section. To output formatted strings use template strings or the % operator described in the String Formatting Operations section. In addition see the String Services section. See also str().

    New in version 2.0.

    Changed in version 2.2: Support for __unicode__() added.

vars([object])

    Return the __dict__ attribute for a module, class, instance, or any other object with a __dict__ attribute.

    Objects such as modules and instances have an updateable __dict__ attribute; however, other objects may have write restrictions on their __dict__ attributes (for example, new-style classes use a dictproxy to prevent direct dictionary updates).

    Without an argument, vars() acts like locals(). Note, the locals dictionary is only useful for reads since updates to the locals dictionary are ignored.

xrange(stop)
xrange(start, stop[, step])

    This function is very similar to range(), but returns an xrange object instead of a list. This is an opaque sequence type which yields the same values as the corresponding list, without actually storing them all simultaneously. The advantage of xrange() over range() is minimal (since xrange() still has to create the values when asked for them) except when a very large range is used on a memory-starved machine or when all of the range’s elements are never used (such as when the loop is usually terminated with break). For more information on xrange objects, see XRange Type and Sequence Types — str, unicode, list, tuple, bytearray, buffer, xrange.

    CPython implementation detail: xrange() is intended to be simple and fast. Implementations may impose restrictions to achieve this. The C implementation of Python restricts all arguments to native C longs (“short” Python integers), and also requires that the number of elements fit in a native C long. If a larger range is needed, an alternate version can be crafted using the itertools module: islice(count(start, step), (stop-start+step-1+2*(step<0))//step).

zip([iterable, ...])

    This function returns a list of tuples, where the i-th tuple contains the i-th element from each of the argument sequences or iterables. The returned list is truncated in length to the length of the shortest argument sequence. When there are multiple arguments which are all of the same length, zip() is similar to map() with an initial argument of None. With a single sequence argument, it returns a list of 1-tuples. With no arguments, it returns an empty list.

    The left-to-right evaluation order of the iterables is guaranteed. This makes possible an idiom for clustering a data series into n-length groups using zip(*[iter(s)]*n).

    zip() in conjunction with the * operator can be used to unzip a list:
    >>>

    >>> x = [1, 2, 3]
    >>> y = [4, 5, 6]
    >>> zipped = zip(x, y)
    >>> zipped
    [(1, 4), (2, 5), (3, 6)]
    >>> x2, y2 = zip(*zipped)
    >>> x == list(x2) and y == list(y2)
    True

    New in version 2.0.

    Changed in version 2.4: Formerly, zip() required at least one argument and zip() raised a TypeError instead of returning an empty list.

__import__(name[, globals[, locals[, fromlist[, level]]]])

    Note

    This is an advanced function that is not needed in everyday Python programming, unlike importlib.import_module().

    This function is invoked by the import statement. It can be replaced (by importing the __builtin__ module and assigning to __builtin__.__import__) in order to change semantics of the import statement, but nowadays it is usually simpler to use import hooks (see PEP 302). Direct use of __import__() is rare, except in cases where you want to import a module whose name is only known at runtime.

    The function imports the module name, potentially using the given globals and locals to determine how to interpret the name in a package context. The fromlist gives the names of objects or submodules that should be imported from the module given by name. The standard implementation does not use its locals argument at all, and uses its globals only to determine the package context of the import statement.

    level specifies whether to use absolute or relative imports. The default is -1 which indicates both absolute and relative imports will be attempted. 0 means only perform absolute imports. Positive values for level indicate the number of parent directories to search relative to the directory of the module calling __import__().

    When the name variable is of the form package.module, normally, the top-level package (the name up till the first dot) is returned, not the module named by name. However, when a non-empty fromlist argument is given, the module named by name is returned.

    For example, the statement import spam results in bytecode resembling the following code:

    spam = __import__('spam', globals(), locals(), [], -1)

    The statement import spam.ham results in this call:

    spam = __import__('spam.ham', globals(), locals(), [], -1)

    Note how __import__() returns the toplevel module here because this is the object that is bound to a name by the import statement.

    On the other hand, the statement from spam.ham import eggs, sausage as saus results in

    _temp = __import__('spam.ham', globals(), locals(), ['eggs', 'sausage'], -1)
    eggs = _temp.eggs
    saus = _temp.sausage

    Here, the spam.ham module is returned from __import__(). From this object, the names to import are retrieved and assigned to their respective names.

    If you simply want to import a module (potentially within a package) by name, use importlib.import_module().

    Changed in version 2.5: The level parameter was added.

    Changed in version 2.5: Keyword support for parameters was added.

3. Non-essential Built-in Functions

There are several built-in functions that are no longer essential to learn, know or use in modern Python programming. They have been kept here to maintain backwards compatibility with programs written for older versions of Python.

Python programmers, trainers, students and book writers should feel free to bypass these functions without concerns about missing something important.

apply(function, args[, keywords])

    The function argument must be a callable object (a user-defined or built-in function or method, or a class object) and the args argument must be a sequence. The function is called with args as the argument list; the number of arguments is the length of the tuple. If the optional keywords argument is present, it must be a dictionary whose keys are strings. It specifies keyword arguments to be added to the end of the argument list. Calling apply() is different from just calling function(args), since in that case there is always exactly one argument. The use of apply() is equivalent to function(*args, **keywords).

    Deprecated since version 2.3: Use function(*args, **keywords) instead of apply(function, args, keywords) (see Unpacking Argument Lists).

buffer(object[, offset[, size]])

    The object argument must be an object that supports the buffer call interface (such as strings, arrays, and buffers). A new buffer object will be created which references the object argument. The buffer object will be a slice from the beginning of object (or from the specified offset). The slice will extend to the end of object (or will have a length given by the size argument).

coerce(x, y)

    Return a tuple consisting of the two numeric arguments converted to a common type, using the same rules as used by arithmetic operations. If coercion is not possible, raise TypeError.

intern(string) Enter string in the table of “interned” strings and return the interned string – which is string itself or a copy. 


